{"version":3,"sources":["webpack:///path---packages-unpublished-astrocoders-bs-reason-apollo-c9846047b8e06006a6a5.js","webpack:///./.cache/json/packages-unpublished-astrocoders-bs-reason-apollo.json"],"names":["webpackJsonp","1105","module","exports","data","package","id","score","name","version","description","keywords","license","updated","stars","type","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,GAAA,2CAAAC,MAAA,EAAAC,KAAA,+BAAAC,QAAA,eAAAC,YAAA,+BAAAC,UAAA,2CAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,GAAAC,KAAA,cAAAC,QAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,OAAA,szLAAkpMC,YAAA,yDAAAC,cAAA,kDAAAC,OAAA,KAAAC,UAAA,yDAAAC,KAAA,sDAAyVC,aAAgBnB,GAAA","file":"path---packages-unpublished-astrocoders-bs-reason-apollo-c9846047b8e06006a6a5.js","sourcesContent":["webpackJsonp([49534952523157],{\n\n/***/ 1105:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"id\":\"unpublished/Astrocoders/bs-reason-apollo\",\"score\":0,\"name\":\"Astrocoders/bs-reason-apollo\",\"version\":\"1.0.0-beta.3\",\"description\":\"React Apollo bindings for BS\",\"keywords\":[\"react\",\"graphql\",\"bucklescript\",\"apollo\"],\"license\":\"MIT\",\"updated\":\"2018-01-06T01:09:11.246Z\",\"stars\":14,\"type\":\"unpublished\",\"quality\":0,\"popularity\":0,\"maintenance\":0,\"readme\":\"<h1>bs-reason-apollo</h1>\\n<p><a href=\\\"https://travis-ci.org/Astrocoders/bs-reason-apollo\\\"><img src=\\\"https://travis-ci.org/Astrocoders/bs-reason-apollo.svg?branch=master\\\" alt=\\\"Build Status\\\"></a></p>\\n<p>Initially inspired by <a href=\\\"https://github.com/FormidableLabs/seattlejsconf-app/blob/master/re/types/ReactApollo.re\\\">https://github.com/FormidableLabs/seattlejsconf-app/blob/master/re/types/ReactApollo.re</a>\\nBut now with a more sugared usage with function as child.</p>\\n<h2>Difference from reason-apollo official</h2>\\n<p>This allows you to use a React Apollo Client that you already have in JS so you can gradually change to Reason.\\nSetup the same way you would do for React Apollo and just plug it in.</p>\\n<h2>Install</h2>\\n<pre><code>yarn add bs-reason-apollo\\n</code></pre>\\n<p>Update your bs-config.json</p>\\n<pre><code class=\\\"language-js\\\">  \\\"bs-dependencies\\\": [\\\"reason-react\\\", \\\"bs-reform\\\", \\\"bs-reason-apollo\\\"],\\n</code></pre>\\n<h2>ReactApollo.CreateWrapper</h2>\\n<p>As you have your ApolloProvider somewhere in the top of your React JS tree you are already covered there.\\nSo now to use it with Apollo create a query definition module for you query:</p>\\n<pre><code class=\\\"language-reason\\\">/* re/SignInQueryGql.re */\\nopen BsReasonApollo;\\n\\nlet query = GraphQLTag.gql({|\\n  query SignInQuery {\\n    currentUser {\\n      id\\n      email\\n    }\\n  }\\n|});\\n\\nmodule Types = {\\n  type user = {. \\\"id\\\": string, \\\"email\\\": string};\\n  type error = {. \\\"message\\\": string};\\n  /* You must always have this data type with loading and error, it's what the HOC gives you */\\n  type data = {\\n    .\\n    \\\"loading\\\": Js.boolean,\\n    \\\"error\\\": Js.null_undefined(error),\\n    /* Our response */\\n    \\\"currentUser\\\": Js.null_undefined(user)\\n  };\\n};\\n\\ntype data = Types.data;\\n\\n/* Define any Js.t variables that you query need here, if you don't use just declare it */\\ntype variables;\\n\\ntype response = Types.user;\\n</code></pre>\\n<p>Now in your actually component:</p>\\n<pre><code class=\\\"language-reason\\\">open BsReasonApollo;\\n\\nmodule SignInQueryWrapper = ReactApollo.CreateWrapper(SignInQueryGql);\\n\\n...\\nlet make = (_children) => {\\n  ...,\\n  render: (_self) =>\\n    &#x3C;SignInQueryWrapper>\\n    ...((~data) =>\\n        switch (\\n          Js.to_bool(data##loading),\\n          Js.Null_undefined.to_opt(data##error),\\n          Js.Null_undefined.to_opt(data##currentUser)\\n        ) {\\n        | (true, _, _) => &#x3C;FullLoading />\\n        | (false, _, Some(user)) =>\\n          &#x3C;Welcome user />\\n        | (false, Some(error), _) => &#x3C;Whoops name=error##message />\\n        | (false, None, _) =>\\n          &#x3C;KeyboardAwareScrollView>\\n            &#x3C;Wrapper>\\n              &#x3C;Header>\\n                &#x3C;Logo\\n                  source=Image.(\\n                           Required(Packager.require(\\\"../../../src/public/img/logo-calendar.png\\\"))\\n                         )\\n                />\\n              &#x3C;/Header>\\n              &#x3C;ContentWrapper\\n                contentContainerStyle=Style.(\\n                                        style([\\n                                          paddingVertical(Pt(40.)),\\n                                          justifyContent(SpaceAround)\\n                                        ])\\n                                      )>\\n                &#x3C;SignInForm />\\n              &#x3C;/ContentWrapper>\\n            &#x3C;/Wrapper>\\n          &#x3C;/KeyboardAwareScrollView>\\n        }\\n      )\\n    &#x3C;/SignInQueryWrapper>\\n}\\n</code></pre>\\n<h2>ReactApollo.CreateMutationWrapper</h2>\\n<p>Define the mutation module:</p>\\n<pre><code class=\\\"language-reason\\\">/* re/SignInMutationGql.re */\\nopen BsReasonApollo;\\n\\nlet query = GraphQLTag.gql({|\\n  mutation SignInQuery($input: SignInInput!) {\\n    signIn(input: $input) {\\n      error\\n      token\\n    }\\n  }\\n|});\\n\\nmodule Types = {\\n  type input = {. \\\"password\\\": string, \\\"email\\\": string};\\n  type signIn = {. \\\"error\\\": Js.null_undefined(string), \\\"token\\\": Js.null_undefined(string)};\\n};\\n\\n/* Needed for mutations, it'll be probably `variables` in the next release */\\ntype input = Types.input;\\n\\n/* Mutation response */\\ntype response = {. \\\"signIn\\\": Types.signIn};\\n</code></pre>\\n<pre><code class=\\\"language-reason\\\">open BsReasonApollo;\\n\\n/* Mutation wrapper */\\nmodule SignInMutationWrapper = ReactApollo.CreateMutationWrapper(SignInQueryGql);\\n\\n/* https://github.com/Astrocoders/reform */\\nmodule SignInForm = ReForm.Create(SignInFormParams);\\n\\nlet convertInputToJs: SignInFormParams.state => SignInMutationGql.Types.signInInput =\\n  (values) => {\\\"password\\\": values.password, \\\"email\\\": values.email};\\n\\nlet handleSubmit = (mutate, values, setSubmitting) =>\\n  values\\n  |> convertToJs\\n  |> mutate\\n  |> Js.Promise.(\\n       then_(\\n         (payload) =>\\n           (\\n             switch (Js.Null_undefined.to_opt(payload##signIn##error)) {\\n             | Some(error) =>\\n               Alert.alert(~title=\\\"Something went wrong\\\", ~message=error, ());\\n               setSubmitting(false)\\n             | None =>\\n               RouterActions.home(~actionType=`replace);\\n               let _ =\\n                 Utils.UserSession.setToken(\\n                   Utils.get(Js.Null_undefined.to_opt(payload##signIn##token), \\\"\\\")\\n                 );\\n               ignore()\\n             }\\n           )\\n           |> resolve\\n       )\\n     )\\n  |> ignore;\\n\\n/* A little abstraction to make function as child composition hurt a bit less */\\nlet enhanced = (mapper) => {\\n  &#x3C;SignInMutationWrapper>\\n    ...((~mutate) => (\\n      &#x3C;SignInForm\\n        initialValues={etc}\\n         onSubmit=(\\n           (values, ~setSubmitting, ~setError as _) =>\\n             handleSubmit(mutate, values, setSubmitting)\\n         )\\n      >\\n        ...mapper\\n      &#x3C;/SignInForm>\\n    ))\\n  &#x3C;/SignInMutationWrapper>\\n};\\n\\nlet component =\\n</code></pre>\\n<h2>Demo</h2>\\n<p>WIP</p>\\n\",\"homepageUrl\":\"https://github.com/Astrocoders/bs-reason-apollo#readme\",\"repositoryUrl\":\"https://github.com/Astrocoders/bs-reason-apollo\",\"npmUrl\":null,\"issuesUrl\":\"https://github.com/Astrocoders/bs-reason-apollo/issues\",\"slug\":\"packages/unpublished/Astrocoders/bs-reason-apollo\"}},\"pathContext\":{\"id\":\"unpublished/Astrocoders/bs-reason-apollo\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---packages-unpublished-astrocoders-bs-reason-apollo-c9846047b8e06006a6a5.js","module.exports = {\"data\":{\"package\":{\"id\":\"unpublished/Astrocoders/bs-reason-apollo\",\"score\":0,\"name\":\"Astrocoders/bs-reason-apollo\",\"version\":\"1.0.0-beta.3\",\"description\":\"React Apollo bindings for BS\",\"keywords\":[\"react\",\"graphql\",\"bucklescript\",\"apollo\"],\"license\":\"MIT\",\"updated\":\"2018-01-06T01:09:11.246Z\",\"stars\":14,\"type\":\"unpublished\",\"quality\":0,\"popularity\":0,\"maintenance\":0,\"readme\":\"<h1>bs-reason-apollo</h1>\\n<p><a href=\\\"https://travis-ci.org/Astrocoders/bs-reason-apollo\\\"><img src=\\\"https://travis-ci.org/Astrocoders/bs-reason-apollo.svg?branch=master\\\" alt=\\\"Build Status\\\"></a></p>\\n<p>Initially inspired by <a href=\\\"https://github.com/FormidableLabs/seattlejsconf-app/blob/master/re/types/ReactApollo.re\\\">https://github.com/FormidableLabs/seattlejsconf-app/blob/master/re/types/ReactApollo.re</a>\\nBut now with a more sugared usage with function as child.</p>\\n<h2>Difference from reason-apollo official</h2>\\n<p>This allows you to use a React Apollo Client that you already have in JS so you can gradually change to Reason.\\nSetup the same way you would do for React Apollo and just plug it in.</p>\\n<h2>Install</h2>\\n<pre><code>yarn add bs-reason-apollo\\n</code></pre>\\n<p>Update your bs-config.json</p>\\n<pre><code class=\\\"language-js\\\">  \\\"bs-dependencies\\\": [\\\"reason-react\\\", \\\"bs-reform\\\", \\\"bs-reason-apollo\\\"],\\n</code></pre>\\n<h2>ReactApollo.CreateWrapper</h2>\\n<p>As you have your ApolloProvider somewhere in the top of your React JS tree you are already covered there.\\nSo now to use it with Apollo create a query definition module for you query:</p>\\n<pre><code class=\\\"language-reason\\\">/* re/SignInQueryGql.re */\\nopen BsReasonApollo;\\n\\nlet query = GraphQLTag.gql({|\\n  query SignInQuery {\\n    currentUser {\\n      id\\n      email\\n    }\\n  }\\n|});\\n\\nmodule Types = {\\n  type user = {. \\\"id\\\": string, \\\"email\\\": string};\\n  type error = {. \\\"message\\\": string};\\n  /* You must always have this data type with loading and error, it's what the HOC gives you */\\n  type data = {\\n    .\\n    \\\"loading\\\": Js.boolean,\\n    \\\"error\\\": Js.null_undefined(error),\\n    /* Our response */\\n    \\\"currentUser\\\": Js.null_undefined(user)\\n  };\\n};\\n\\ntype data = Types.data;\\n\\n/* Define any Js.t variables that you query need here, if you don't use just declare it */\\ntype variables;\\n\\ntype response = Types.user;\\n</code></pre>\\n<p>Now in your actually component:</p>\\n<pre><code class=\\\"language-reason\\\">open BsReasonApollo;\\n\\nmodule SignInQueryWrapper = ReactApollo.CreateWrapper(SignInQueryGql);\\n\\n...\\nlet make = (_children) => {\\n  ...,\\n  render: (_self) =>\\n    &#x3C;SignInQueryWrapper>\\n    ...((~data) =>\\n        switch (\\n          Js.to_bool(data##loading),\\n          Js.Null_undefined.to_opt(data##error),\\n          Js.Null_undefined.to_opt(data##currentUser)\\n        ) {\\n        | (true, _, _) => &#x3C;FullLoading />\\n        | (false, _, Some(user)) =>\\n          &#x3C;Welcome user />\\n        | (false, Some(error), _) => &#x3C;Whoops name=error##message />\\n        | (false, None, _) =>\\n          &#x3C;KeyboardAwareScrollView>\\n            &#x3C;Wrapper>\\n              &#x3C;Header>\\n                &#x3C;Logo\\n                  source=Image.(\\n                           Required(Packager.require(\\\"../../../src/public/img/logo-calendar.png\\\"))\\n                         )\\n                />\\n              &#x3C;/Header>\\n              &#x3C;ContentWrapper\\n                contentContainerStyle=Style.(\\n                                        style([\\n                                          paddingVertical(Pt(40.)),\\n                                          justifyContent(SpaceAround)\\n                                        ])\\n                                      )>\\n                &#x3C;SignInForm />\\n              &#x3C;/ContentWrapper>\\n            &#x3C;/Wrapper>\\n          &#x3C;/KeyboardAwareScrollView>\\n        }\\n      )\\n    &#x3C;/SignInQueryWrapper>\\n}\\n</code></pre>\\n<h2>ReactApollo.CreateMutationWrapper</h2>\\n<p>Define the mutation module:</p>\\n<pre><code class=\\\"language-reason\\\">/* re/SignInMutationGql.re */\\nopen BsReasonApollo;\\n\\nlet query = GraphQLTag.gql({|\\n  mutation SignInQuery($input: SignInInput!) {\\n    signIn(input: $input) {\\n      error\\n      token\\n    }\\n  }\\n|});\\n\\nmodule Types = {\\n  type input = {. \\\"password\\\": string, \\\"email\\\": string};\\n  type signIn = {. \\\"error\\\": Js.null_undefined(string), \\\"token\\\": Js.null_undefined(string)};\\n};\\n\\n/* Needed for mutations, it'll be probably `variables` in the next release */\\ntype input = Types.input;\\n\\n/* Mutation response */\\ntype response = {. \\\"signIn\\\": Types.signIn};\\n</code></pre>\\n<pre><code class=\\\"language-reason\\\">open BsReasonApollo;\\n\\n/* Mutation wrapper */\\nmodule SignInMutationWrapper = ReactApollo.CreateMutationWrapper(SignInQueryGql);\\n\\n/* https://github.com/Astrocoders/reform */\\nmodule SignInForm = ReForm.Create(SignInFormParams);\\n\\nlet convertInputToJs: SignInFormParams.state => SignInMutationGql.Types.signInInput =\\n  (values) => {\\\"password\\\": values.password, \\\"email\\\": values.email};\\n\\nlet handleSubmit = (mutate, values, setSubmitting) =>\\n  values\\n  |> convertToJs\\n  |> mutate\\n  |> Js.Promise.(\\n       then_(\\n         (payload) =>\\n           (\\n             switch (Js.Null_undefined.to_opt(payload##signIn##error)) {\\n             | Some(error) =>\\n               Alert.alert(~title=\\\"Something went wrong\\\", ~message=error, ());\\n               setSubmitting(false)\\n             | None =>\\n               RouterActions.home(~actionType=`replace);\\n               let _ =\\n                 Utils.UserSession.setToken(\\n                   Utils.get(Js.Null_undefined.to_opt(payload##signIn##token), \\\"\\\")\\n                 );\\n               ignore()\\n             }\\n           )\\n           |> resolve\\n       )\\n     )\\n  |> ignore;\\n\\n/* A little abstraction to make function as child composition hurt a bit less */\\nlet enhanced = (mapper) => {\\n  &#x3C;SignInMutationWrapper>\\n    ...((~mutate) => (\\n      &#x3C;SignInForm\\n        initialValues={etc}\\n         onSubmit=(\\n           (values, ~setSubmitting, ~setError as _) =>\\n             handleSubmit(mutate, values, setSubmitting)\\n         )\\n      >\\n        ...mapper\\n      &#x3C;/SignInForm>\\n    ))\\n  &#x3C;/SignInMutationWrapper>\\n};\\n\\nlet component =\\n</code></pre>\\n<h2>Demo</h2>\\n<p>WIP</p>\\n\",\"homepageUrl\":\"https://github.com/Astrocoders/bs-reason-apollo#readme\",\"repositoryUrl\":\"https://github.com/Astrocoders/bs-reason-apollo\",\"npmUrl\":null,\"issuesUrl\":\"https://github.com/Astrocoders/bs-reason-apollo/issues\",\"slug\":\"packages/unpublished/Astrocoders/bs-reason-apollo\"}},\"pathContext\":{\"id\":\"unpublished/Astrocoders/bs-reason-apollo\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/packages-unpublished-astrocoders-bs-reason-apollo.json\n// module id = 1105\n// module chunks = 49534952523157"],"sourceRoot":""}