{"version":3,"sources":["webpack:///path---packages-re-respect-e91733e35e040622bf3d.js","webpack:///./.cache/json/packages-re-respect.json"],"names":["webpackJsonp","1089","module","exports","data","package","id","score","name","version","description","keywords","license","updated","stars","type","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,GAAA,aAAAC,MAAA,kBAAAC,KAAA,aAAAC,QAAA,QAAAC,YAAA,kIAAAC,UAAA,gCAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,GAAAC,KAAA,YAAAC,QAAA,kBAAAC,WAAA,oBAAAC,YAAA,kBAAAC,OAAA,otEAAAC,YAAA,mDAAAC,cAAA,4CAAAC,OAAA,2CAAAC,UAAA,mDAAAC,KAAA,wBAAm7FC,aAAgBnB,GAAA","file":"path---packages-re-respect-e91733e35e040622bf3d.js","sourcesContent":["webpackJsonp([154053647533515],{\n\n/***/ 1089:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"id\":\"re-respect\",\"score\":0.6101489101721378,\"name\":\"re-respect\",\"version\":\"0.5.0\",\"description\":\"[![Build Status](https://travis-ci.org/PeteProgrammer/respect.svg?branch=master)](https://travis-ci.org/PeteProgrammer/respect)\",\"keywords\":[\"bucklescript\",\"testing\",\"bdd\"],\"license\":\"MIT\",\"updated\":\"2018-01-08T18:33:16.304Z\",\"stars\":11,\"type\":\"published\",\"quality\":0.8244711473602331,\"popularity\":0.054078973560322686,\"maintenance\":0.9825140720512998,\"readme\":\"<h1>ReSpect</h1>\\n<p><a href=\\\"https://travis-ci.org/PeteProgrammer/respect\\\"><img src=\\\"https://travis-ci.org/PeteProgrammer/respect.svg?branch=master\\\" alt=\\\"Build Status\\\"></a></p>\\n<p>This is an RSpec inspired test framework for ReasonML/OCaml/Bucklescript. The\\nrunner uses raw javascript code, so it will only run in node environments at the moment.</p>\\n<p>I base this on a lot of experience I gained from a similar project for F#, FSpec.</p>\\n<p>This project is still in a very early stage, so use at your own risk.</p>\\n<h2>Latest changes</h2>\\n<h3>0.4.0 - 0.4.3</h3>\\n<ul>\\n<li>Added <code>Ctx.tryGet</code> - Returns <code>None</code> if no entry with the specified key exists\\nin the context data.</li>\\n<li>Added Respect.Ctx module as alias for TestContext</li>\\n<li>TestContext.don function to help accept a done callback from setup functions</li>\\n<li>Refactor: Test context is now represented by an object instead of a mutable\\nrecord. But the TestContext module still has functions for operating on the\\nactual context, so existing code should be compatible.</li>\\n<li>Testcontext subject: The subject is a function that evaluates to an actual\\nvalue when requested. The function receives the test context as input. You\\ncan assign the subject in a parent group, and modify the context in a child\\ngroup.</li>\\n<li>TextContext.map: Allows you to easily modify objects in the context.</li>\\n</ul>\\n<h2>TODO</h2>\\n<ul>\\n<li>\\\"Finalize\\\" DSL for building test suites.</li>\\n<li>Determine whether or not to allow mutation of <code>TestContext</code>. This worked well\\nin F#/FSpec, but we don't have runtime type checking in Reason/Bucklescript.</li>\\n<li>Finalize assertion framework.</li>\\n<li>Nicer test output when running.</li>\\n<li>Nicer test output when assertions fail.</li>\\n<li>Internally, figure out how to report progresss.</li>\\n<li>More flexible runner, e.g. configurable location of test files</li>\\n<li>✓ Handle async timeout to avoid hanging when async tests don't call back</li>\\n<li>Make timeout configurable through example metadata.</li>\\n</ul>\\n<p>Although, I had learned from many mistakes when building FSpec, there are some\\nproblems that demand different solutions in Reason/Bucklescript. Async support\\nin particular.</p>\\n\",\"homepageUrl\":\"https://github.com/PeteProgrammer/respect#readme\",\"repositoryUrl\":\"https://github.com/PeteProgrammer/respect\",\"npmUrl\":\"https://www.npmjs.com/package/re-respect\",\"issuesUrl\":\"https://github.com/PeteProgrammer/respect/issues\",\"slug\":\"packages/re-respect\"}},\"pathContext\":{\"id\":\"re-respect\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---packages-re-respect-e91733e35e040622bf3d.js","module.exports = {\"data\":{\"package\":{\"id\":\"re-respect\",\"score\":0.6101489101721378,\"name\":\"re-respect\",\"version\":\"0.5.0\",\"description\":\"[![Build Status](https://travis-ci.org/PeteProgrammer/respect.svg?branch=master)](https://travis-ci.org/PeteProgrammer/respect)\",\"keywords\":[\"bucklescript\",\"testing\",\"bdd\"],\"license\":\"MIT\",\"updated\":\"2018-01-08T18:33:16.304Z\",\"stars\":11,\"type\":\"published\",\"quality\":0.8244711473602331,\"popularity\":0.054078973560322686,\"maintenance\":0.9825140720512998,\"readme\":\"<h1>ReSpect</h1>\\n<p><a href=\\\"https://travis-ci.org/PeteProgrammer/respect\\\"><img src=\\\"https://travis-ci.org/PeteProgrammer/respect.svg?branch=master\\\" alt=\\\"Build Status\\\"></a></p>\\n<p>This is an RSpec inspired test framework for ReasonML/OCaml/Bucklescript. The\\nrunner uses raw javascript code, so it will only run in node environments at the moment.</p>\\n<p>I base this on a lot of experience I gained from a similar project for F#, FSpec.</p>\\n<p>This project is still in a very early stage, so use at your own risk.</p>\\n<h2>Latest changes</h2>\\n<h3>0.4.0 - 0.4.3</h3>\\n<ul>\\n<li>Added <code>Ctx.tryGet</code> - Returns <code>None</code> if no entry with the specified key exists\\nin the context data.</li>\\n<li>Added Respect.Ctx module as alias for TestContext</li>\\n<li>TestContext.don function to help accept a done callback from setup functions</li>\\n<li>Refactor: Test context is now represented by an object instead of a mutable\\nrecord. But the TestContext module still has functions for operating on the\\nactual context, so existing code should be compatible.</li>\\n<li>Testcontext subject: The subject is a function that evaluates to an actual\\nvalue when requested. The function receives the test context as input. You\\ncan assign the subject in a parent group, and modify the context in a child\\ngroup.</li>\\n<li>TextContext.map: Allows you to easily modify objects in the context.</li>\\n</ul>\\n<h2>TODO</h2>\\n<ul>\\n<li>\\\"Finalize\\\" DSL for building test suites.</li>\\n<li>Determine whether or not to allow mutation of <code>TestContext</code>. This worked well\\nin F#/FSpec, but we don't have runtime type checking in Reason/Bucklescript.</li>\\n<li>Finalize assertion framework.</li>\\n<li>Nicer test output when running.</li>\\n<li>Nicer test output when assertions fail.</li>\\n<li>Internally, figure out how to report progresss.</li>\\n<li>More flexible runner, e.g. configurable location of test files</li>\\n<li>✓ Handle async timeout to avoid hanging when async tests don't call back</li>\\n<li>Make timeout configurable through example metadata.</li>\\n</ul>\\n<p>Although, I had learned from many mistakes when building FSpec, there are some\\nproblems that demand different solutions in Reason/Bucklescript. Async support\\nin particular.</p>\\n\",\"homepageUrl\":\"https://github.com/PeteProgrammer/respect#readme\",\"repositoryUrl\":\"https://github.com/PeteProgrammer/respect\",\"npmUrl\":\"https://www.npmjs.com/package/re-respect\",\"issuesUrl\":\"https://github.com/PeteProgrammer/respect/issues\",\"slug\":\"packages/re-respect\"}},\"pathContext\":{\"id\":\"re-respect\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/packages-re-respect.json\n// module id = 1089\n// module chunks = 154053647533515"],"sourceRoot":""}