{"version":3,"sources":["webpack:///path---packages-unpublished-glennsl-refetch-ce50e67965cb2ca67004.js","webpack:///./.cache/json/packages-unpublished-glennsl-refetch.json"],"names":["webpackJsonp","1131","module","exports","data","package","id","score","name","version","description","keywords","license","updated","stars","type","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,GAAA,8BAAAC,MAAA,EAAAC,KAAA,kBAAAC,QAAA,QAAAC,YAAA,2EAAAC,UAAA,+CAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,EAAAC,KAAA,cAAAC,QAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,OAAA,u4CAA0vDC,YAAA,4CAAAC,cAAA,qCAAAC,OAAA,KAAAC,UAAA,4CAAAC,KAAA,yCAAuPC,aAAgBnB,GAAA","file":"path---packages-unpublished-glennsl-refetch-ce50e67965cb2ca67004.js","sourcesContent":["webpackJsonp([278890133405551],{\n\n/***/ 1131:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"id\":\"unpublished/glennsl/refetch\",\"score\":0,\"name\":\"glennsl/refetch\",\"version\":\"0.1.0\",\"description\":\"A strongly typed and immutable API built on top of the `fetch` standard \",\"keywords\":[\"http\",\"fetch\",\"bucklescript\",\"reason\",\"ajax\"],\"license\":\"MIT\",\"updated\":\"2017-12-31T20:34:19.604Z\",\"stars\":8,\"type\":\"unpublished\",\"quality\":0,\"popularity\":0,\"maintenance\":0,\"readme\":\"<h1>re:fetch</h1>\\n<p>Refetch is a strongly typed and immutable API built on top of the <code>fetch</code> standard. It is also incomplete, highly experimental and prone to change.</p>\\n<h2>Example</h2>\\n<pre><code class=\\\"language-reason\\\">/* Simple GET */\\nResync.(Refetch.(\\n  get(\\\"http://httpbin.org/get\\\")\\n  |> Future.flatMap(\\n     fun | Response.Ok(_, response) => Response.text(response)\\n         | _ => \\\"oops!\\\" |> Future.from)\\n  |> Future.whenResolved(Js.log)\\n));\\n\\n/* builder functions */\\nResync.(Refetch.(\\n  request(`POST, \\\"https://httpbin.org/post\\\")\\n    |> Request.header(`ContentType(\\\"application/x-www-form-urlencoded; charset=UTF-8\\\"))\\n    |> Request.payload(`String(\\\"title=foobar&#x26;body=bar&#x26;userId=1\\\"))\\n  |> fetch\\n    |> Future.flatMap(\\n        fun | Response.Ok(_, response) => Response.text(response)\\n            | Response.Error({ reason }, _) => Future.from(reason))\\n    |> Future.whenResolved(Js.log)\\n));\\n\\n/* labeled arguments */\\nResync.(Refetch.(\\n  request(`POST, \\\"https://httpbin.org/post\\\",\\n    ~headers=[`ContentType(\\\"application/x-www-form-urlencoded; charset=UTF-8\\\")],\\n    ~body=`String(\\\"title=foobar&#x26;body=bar&#x26;userId=1\\\"))\\n  |> fetch\\n    |> Future.flatMap(\\n        fun | Response.Ok(_, response) => Response.text(response)\\n            | Response.Error({ reason }, _) => Future.from(reason))\\n    |> Future.whenResolved(Js.log)\\n));\\n</code></pre>\\n\",\"homepageUrl\":\"https://github.com/glennsl/refetch#readme\",\"repositoryUrl\":\"https://github.com/glennsl/refetch\",\"npmUrl\":null,\"issuesUrl\":\"https://github.com/glennsl/refetch/issues\",\"slug\":\"packages/unpublished/glennsl/refetch\"}},\"pathContext\":{\"id\":\"unpublished/glennsl/refetch\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---packages-unpublished-glennsl-refetch-ce50e67965cb2ca67004.js","module.exports = {\"data\":{\"package\":{\"id\":\"unpublished/glennsl/refetch\",\"score\":0,\"name\":\"glennsl/refetch\",\"version\":\"0.1.0\",\"description\":\"A strongly typed and immutable API built on top of the `fetch` standard \",\"keywords\":[\"http\",\"fetch\",\"bucklescript\",\"reason\",\"ajax\"],\"license\":\"MIT\",\"updated\":\"2017-12-31T20:34:19.604Z\",\"stars\":8,\"type\":\"unpublished\",\"quality\":0,\"popularity\":0,\"maintenance\":0,\"readme\":\"<h1>re:fetch</h1>\\n<p>Refetch is a strongly typed and immutable API built on top of the <code>fetch</code> standard. It is also incomplete, highly experimental and prone to change.</p>\\n<h2>Example</h2>\\n<pre><code class=\\\"language-reason\\\">/* Simple GET */\\nResync.(Refetch.(\\n  get(\\\"http://httpbin.org/get\\\")\\n  |> Future.flatMap(\\n     fun | Response.Ok(_, response) => Response.text(response)\\n         | _ => \\\"oops!\\\" |> Future.from)\\n  |> Future.whenResolved(Js.log)\\n));\\n\\n/* builder functions */\\nResync.(Refetch.(\\n  request(`POST, \\\"https://httpbin.org/post\\\")\\n    |> Request.header(`ContentType(\\\"application/x-www-form-urlencoded; charset=UTF-8\\\"))\\n    |> Request.payload(`String(\\\"title=foobar&#x26;body=bar&#x26;userId=1\\\"))\\n  |> fetch\\n    |> Future.flatMap(\\n        fun | Response.Ok(_, response) => Response.text(response)\\n            | Response.Error({ reason }, _) => Future.from(reason))\\n    |> Future.whenResolved(Js.log)\\n));\\n\\n/* labeled arguments */\\nResync.(Refetch.(\\n  request(`POST, \\\"https://httpbin.org/post\\\",\\n    ~headers=[`ContentType(\\\"application/x-www-form-urlencoded; charset=UTF-8\\\")],\\n    ~body=`String(\\\"title=foobar&#x26;body=bar&#x26;userId=1\\\"))\\n  |> fetch\\n    |> Future.flatMap(\\n        fun | Response.Ok(_, response) => Response.text(response)\\n            | Response.Error({ reason }, _) => Future.from(reason))\\n    |> Future.whenResolved(Js.log)\\n));\\n</code></pre>\\n\",\"homepageUrl\":\"https://github.com/glennsl/refetch#readme\",\"repositoryUrl\":\"https://github.com/glennsl/refetch\",\"npmUrl\":null,\"issuesUrl\":\"https://github.com/glennsl/refetch/issues\",\"slug\":\"packages/unpublished/glennsl/refetch\"}},\"pathContext\":{\"id\":\"unpublished/glennsl/refetch\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/packages-unpublished-glennsl-refetch.json\n// module id = 1131\n// module chunks = 278890133405551"],"sourceRoot":""}