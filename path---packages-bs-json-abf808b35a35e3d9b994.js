webpackJsonp([25256703169320],{912:function(e,n){e.exports={data:{package:{id:"bs-json",updated:"2017-12-19T23:18:54.426Z",name:"bs-json",version:"0.2.4",description:"Experimental JSON encode/decode library for BuckleScript.",keywords:["json","bucklescript"],license:"MIT",type:"published",stars:37,readme:'<h1>bs-json</h1>\n<p>Experimental JSON encode/decode library for BuckleScript.</p>\n<p>The Decode module in particular provides a basic set of decoder functions to be composed into more complex decoders. A decoder is a function that takes a <code>Js.Json.t</code> and either returns a value of the desired type if successful or raises a <code>DecodeError</code> exception if not. Other functions accept a decoder and produce another decoder. Like <code>array</code>, which when given a decoder for type <code>t</code> will return a decoder that tries to produce a value of type <code>t array</code>. So to decode an <code>int array</code> you combine <code>Json.Decode.int</code> with <code>Json.Decode.array</code> into <code>Json.Decode.(array int)</code>. An array of arrays of ints? <code>Json.Deocde.(array (array int))</code>. Dict containing arrays of ints? <code>Json.Decode.(dict (array int))</code>.</p>\n<h2>Example</h2>\n<pre><code class="language-ml">(* OCaml *)\ntype line = {\n  start: point;\n  end_: point;\n  thickness: int option\n}\nand point = {\n  x: float;\n  y: float\n}\n\nmodule Decode = struct\n  let point json =\n    let open! Json.Decode in {\n      x = json |> field "x" float;\n      y = json |> field "y" float\n    }\n\n  let line json =\n    Json.Decode.{\n      start     = json |> field "start" point;\n      end_      = json |> field "end" point;\n      thickness = json |> optional (field "thickness" int)\n    }\nend\n\nlet data = {| {\n  "start": { "x": 1.1, "y": -0.4 },\n  "end":   { "x": 5.3, "y": 3.8 }\n} |}\n\nlet line = data |> Js.Json.parseExn\n                |> Decode.line\n</code></pre>\n<pre><code class="language-reason">/* Reason */\ntype line = {\n  start: point,\n  end_: point,\n  thickness: option(int)\n}\nand point = {\n  x: float,\n  y: float\n};\n\nmodule Decode = {\n  let point = (json) =>\n    Json.Decode.{\n      x: json |> field("x", float),\n      y: json |> field("y", float)\n    };\n\n  let line = (json) =>\n    Json.Decode.{\n      start:     json |> field("start", point),\n      end_:      json |> field("end", point),\n      thickness: json |> optional(field("thickness", int))\n    };\n};\n\nlet data = {| {\n  "start": { "x": 1.1, "y": -0.4 },\n  "end":   { "x": 5.3, "y": 3.8 }\n} |};\n\nlet line = data |> Js.Json.parseExn\n                |> Decode.line;\n</code></pre>\n<p>See <a href="https://github.com/reasonml-community/bs-json/blob/master/examples/">examples</a> for more.</p>\n<h2>Installation</h2>\n<pre><code class="language-sh">npm install --save bs-json\n</code></pre>\n<p>Then add <code>bs-json</code> to <code>bs-dependencies</code> in your <code>bsconfig.json</code>:</p>\n<pre><code class="language-js">{\n  ...\n  "bs-dependencies": ["bs-json"]\n}\n</code></pre>\n<h2>Changes</h2>\n<h3>0.2.4</h3>\n<ul>\n<li>Added <code>Json.Encode.bool</code></li>\n<li>Added <code>Json.Encode.pair</code>\n\' Added <code>Json.Encode.withDefault</code></li>\n<li>Added <code>Json.Encode.nullable</code></li>\n<li>Added <code>Json.Encode.arrayOf</code></li>\n<li>Added <code>Json.Encode.jsonArray</code> as replacement for <code>Json.Encode.array</code></li>\n<li>Deprecated <code>Json.Encode.array</code></li>\n</ul>\n<h3>0.2.3</h3>\n<ul>\n<li>Fixed embarrassing bug where an API was used that isn\'t available on IE (honestly more embarrassed on behalf IE though)</li>\n</ul>\n<h3>0.2.2</h3>\n<ul>\n<li>Added <code>Json.Decode.pair</code></li>\n</ul>\n<h3>0.2.1</h3>\n<ul>\n<li>Added <code>Json.Encode.list</code></li>\n</ul>\n<h3>0.2.0</h3>\n<ul>\n<li>Breaking: Renamed <code>Json.Encode.object_</code> to <code>Json.Encode.dict</code></li>\n<li>Added <code>Json.Encode.object_</code> taking a list of properties instead of a Json.Dict.t as before</li>\n</ul>\n',homepageUrl:"https://github.com/reasonml-community/bs-json#readme",repositoryUrl:"https://github.com/reasonml-community/bs-json",npmUrl:"https://www.npmjs.com/package/bs-json",issuesUrl:"https://github.com/reasonml-community/bs-json/issues",slug:"packages/bs-json"}},pathContext:{id:"bs-json"}}}});
//# sourceMappingURL=path---packages-bs-json-abf808b35a35e3d9b994.js.map