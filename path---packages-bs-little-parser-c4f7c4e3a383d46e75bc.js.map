{"version":3,"sources":["webpack:///path---packages-bs-little-parser-c4f7c4e3a383d46e75bc.js","webpack:///./.cache/json/packages-bs-little-parser.json"],"names":["webpackJsonp","1012","module","exports","data","package","id","score","name","version","description","keywords","license","updated","stars","type","quality","popularity","maintenance","readme","homepageUrl","repositoryUrl","npmUrl","issuesUrl","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,SAAWC,GAAA,mBAAAC,MAAA,iBAAAC,KAAA,mBAAAC,QAAA,QAAAC,YAAA,uDAAAC,UAAA,yBAAAC,QAAA,MAAAC,QAAA,2BAAAC,MAAA,EAAAC,KAAA,YAAAC,QAAA,kBAAAC,WAAA,mBAAAC,YAAA,iBAAAC,OAAA,omEAAgsDC,YAAA,mDAAAC,cAAA,4CAAAC,OAAA,iDAAAC,UAAA,mDAAAC,KAAA,8BAAmoCC,aAAgBnB,GAAA","file":"path---packages-bs-little-parser-c4f7c4e3a383d46e75bc.js","sourcesContent":["webpackJsonp([203962253634877],{\n\n/***/ 1012:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"package\":{\"id\":\"bs-little-parser\",\"score\":0.580566375938764,\"name\":\"bs-little-parser\",\"version\":\"0.3.4\",\"description\":\"Little parser combinator for BuckleScript or Reason.\",\"keywords\":[\"bucklescript\",\"reason\"],\"license\":\"MIT\",\"updated\":\"2017-12-20T17:55:30.744Z\",\"stars\":2,\"type\":\"published\",\"quality\":0.7011133760696968,\"popularity\":0.06343542194456615,\"maintenance\":0.994371329820734,\"readme\":\"<h1>bs-little-parser</h1>\\n<p>Little parser combinator for BuckleScript or Reason.</p>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-ml\\\">open BsLittleParser.Parser\\n\\nlet input = BsLittleParser.Input.{text = \\\"abcabc  abc\\\"; index = 0; whitespace = \\\" \\\"}\\n\\nlet abc = stringParser \\\"abc\\\"\\n\\nlet () =\\n  input\\n  |> rep abc\\n  |> Js.log\\n</code></pre>\\n<p>Type <code>Input.t</code> has a whitespace which specify a character sequence should be ignored.</p>\\n<h2>Parsers</h2>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">parser</th>\\n<th align=\\\"left\\\">description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\">str s</td>\\n<td align=\\\"left\\\">expect string</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">chr c</td>\\n<td align=\\\"left\\\">expect char</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">regex r</td>\\n<td align=\\\"left\\\">expect regex</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>&#x3C;*></code>\\n q</td>\\n<td align=\\\"left\\\">execute q only if p succeeds</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>&#x3C;|></code>\\n q</td>\\n<td align=\\\"left\\\">execute q only if p fails</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>&#x3C;*</code>\\n q</td>\\n<td align=\\\"left\\\">same with \\n<code>&#x3C;*></code>\\n but throw the result of q away</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>*></code>\\n q</td>\\n<td align=\\\"left\\\">same with \\n<code>&#x3C;*></code>\\n but throw the result of p away</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>>></code>\\n fnq</td>\\n<td align=\\\"left\\\">apply the result of p to fnq then execute the return parser</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>^^</code>\\n fn</td>\\n<td align=\\\"left\\\">apply the result of p to fn</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">rep p</td>\\n<td align=\\\"left\\\">repeat p</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">rep1 p</td>\\n<td align=\\\"left\\\">repeat p at least once</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">opt p</td>\\n<td align=\\\"left\\\">execute p zero or once</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">andPred p</td>\\n<td align=\\\"left\\\">execute p without consuming the input</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">notPred p</td>\\n<td align=\\\"left\\\">succeeds only if p fails without consuming the input</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>License</h2>\\n<p>MIT</p>\\n\",\"homepageUrl\":\"https://github.com/Henoc/bs-little-parser#readme\",\"repositoryUrl\":\"https://github.com/Henoc/bs-little-parser\",\"npmUrl\":\"https://www.npmjs.com/package/bs-little-parser\",\"issuesUrl\":\"https://github.com/Henoc/bs-little-parser/issues\",\"slug\":\"packages/bs-little-parser\"}},\"pathContext\":{\"id\":\"bs-little-parser\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---packages-bs-little-parser-c4f7c4e3a383d46e75bc.js","module.exports = {\"data\":{\"package\":{\"id\":\"bs-little-parser\",\"score\":0.580566375938764,\"name\":\"bs-little-parser\",\"version\":\"0.3.4\",\"description\":\"Little parser combinator for BuckleScript or Reason.\",\"keywords\":[\"bucklescript\",\"reason\"],\"license\":\"MIT\",\"updated\":\"2017-12-20T17:55:30.744Z\",\"stars\":2,\"type\":\"published\",\"quality\":0.7011133760696968,\"popularity\":0.06343542194456615,\"maintenance\":0.994371329820734,\"readme\":\"<h1>bs-little-parser</h1>\\n<p>Little parser combinator for BuckleScript or Reason.</p>\\n<h2>Usage</h2>\\n<pre><code class=\\\"language-ml\\\">open BsLittleParser.Parser\\n\\nlet input = BsLittleParser.Input.{text = \\\"abcabc  abc\\\"; index = 0; whitespace = \\\" \\\"}\\n\\nlet abc = stringParser \\\"abc\\\"\\n\\nlet () =\\n  input\\n  |> rep abc\\n  |> Js.log\\n</code></pre>\\n<p>Type <code>Input.t</code> has a whitespace which specify a character sequence should be ignored.</p>\\n<h2>Parsers</h2>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">parser</th>\\n<th align=\\\"left\\\">description</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td align=\\\"left\\\">str s</td>\\n<td align=\\\"left\\\">expect string</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">chr c</td>\\n<td align=\\\"left\\\">expect char</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">regex r</td>\\n<td align=\\\"left\\\">expect regex</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>&#x3C;*></code>\\n q</td>\\n<td align=\\\"left\\\">execute q only if p succeeds</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>&#x3C;|></code>\\n q</td>\\n<td align=\\\"left\\\">execute q only if p fails</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>&#x3C;*</code>\\n q</td>\\n<td align=\\\"left\\\">same with \\n<code>&#x3C;*></code>\\n but throw the result of q away</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>*></code>\\n q</td>\\n<td align=\\\"left\\\">same with \\n<code>&#x3C;*></code>\\n but throw the result of p away</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>>></code>\\n fnq</td>\\n<td align=\\\"left\\\">apply the result of p to fnq then execute the return parser</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">p \\n<code>^^</code>\\n fn</td>\\n<td align=\\\"left\\\">apply the result of p to fn</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">rep p</td>\\n<td align=\\\"left\\\">repeat p</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">rep1 p</td>\\n<td align=\\\"left\\\">repeat p at least once</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">opt p</td>\\n<td align=\\\"left\\\">execute p zero or once</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">andPred p</td>\\n<td align=\\\"left\\\">execute p without consuming the input</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">notPred p</td>\\n<td align=\\\"left\\\">succeeds only if p fails without consuming the input</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>License</h2>\\n<p>MIT</p>\\n\",\"homepageUrl\":\"https://github.com/Henoc/bs-little-parser#readme\",\"repositoryUrl\":\"https://github.com/Henoc/bs-little-parser\",\"npmUrl\":\"https://www.npmjs.com/package/bs-little-parser\",\"issuesUrl\":\"https://github.com/Henoc/bs-little-parser/issues\",\"slug\":\"packages/bs-little-parser\"}},\"pathContext\":{\"id\":\"bs-little-parser\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/packages-bs-little-parser.json\n// module id = 1012\n// module chunks = 203962253634877"],"sourceRoot":""}